import streamlit as st
import numpy as np
import pandas as pd
import pandas_ta as ta
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score
import logging
import time

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- KH√îNG C·∫¶N EASYOCR V√Ä C·∫ÆT ·∫¢NH N·ªÆA ---

# H√†m t√≠nh SuperTrend (kh√¥ng ƒë·ªïi)
def calculate_supertrend(highs, lows, closes, period=10, multiplier=3):
    try:
        atr = ta.atr(highs, lows, closes, length=period)
        hl2 = (highs + lows) / 2
        upper = hl2 + (multiplier * atr)
        lower = hl2 - (multiplier * atr)
        return upper, lower 
    except Exception as e:
        logger.error(f"Error in calculate_supertrend: {e}")
        return None, None

# H√†m Hu·∫•n luy·ªán M√¥ h√¨nh ML (S·ª≠ d·ª•ng d·ªØ li·ªáu nh·∫≠p th·ªß c√¥ng)
@st.cache_data
def train_model(entry_price, supertrend_val, ema200_val, rsi_val, macd_val):
    """T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p d·ª±a tr√™n gi√° nh·∫≠p th·ªß c√¥ng ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh ML."""
    
    if entry_price is None or entry_price <= 0:
        logger.error("Gi√° Entry b·ªã thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        # Tr·∫£ v·ªÅ c√°c gi√° tr·ªã None/default n·∫øu kh√¥ng th·ªÉ hu·∫•n luy·ªán
        return None, 0.5, 0, None, None, None, None

    np.random.seed(42)
    num_candles = 200 
    
    # S·ª≠ d·ª•ng gi√° tr·ªã c∆° s·ªü (Entry Price) ƒë·ªÉ t·∫°o chu·ªói l·ªãch s·ª≠ gi·∫£ l·∫≠p
    base_price = entry_price
    base_volume = 10000 
    
    # T·∫°o chu·ªói gi√° l·ªãch s·ª≠ gi·∫£ l·∫≠p
    # B·∫Øt ƒë·∫ßu chu·ªói gi√° xung quanh gi√° tr·ªã EMA200 (ƒë·ªÉ c√≥ m√¥ h√¨nh h·ª£p l√Ω)
    # Th√™m nhi·ªÖu ƒë·ªÉ t·∫°o ra s·ª± bi·∫øn ƒë·ªông t·ª± nhi√™n
    closes = np.cumsum(np.random.normal(0, base_price * 0.005, num_candles - 1)) + ema200_val * 1.01
    
    # ƒê·∫£m b·∫£o n·∫øn cu·ªëi c√πng l√† Entry Price 
    closes = np.append(closes, base_price)
    
    # Gi·∫£ l·∫≠p OHL (gi·∫£ ƒë·ªãnh n·∫øn ƒë√≥ng g·∫ßn v·ªõi gi√° tr·ªã)
    highs = closes * (1 + np.abs(np.random.normal(0, 0.005, num_candles)))
    lows = closes * (1 - np.abs(np.random.normal(0, 0.005, num_candles)))
    volumes = np.random.uniform(base_volume * 0.5, base_volume * 1.5, num_candles)
    
    # ƒê·∫£m b·∫£o n·∫øn cu·ªëi c√πng s·ª≠ d·ª•ng gi√° tr·ªã Entry
    highs[-1] = max(base_price * 1.002, base_price)
    lows[-1] = min(base_price * 0.998, base_price)

    df = pd.DataFrame({"high": highs, "low": lows, "close": closes, "volume": volumes})
    
    # T√çNH TO√ÅN C√ÅC CH·ªà B√ÅO T·ª™ D·ªÆ LI·ªÜU GI·∫¢ L·∫¨P
    supertrend_series, _ = calculate_supertrend(df['high'], df['low'], df['close'])
    ema200_series = ta.ema(df['close'], length=200).fillna(method='bfill')
    rsi_series = ta.rsi(df['close'], length=14).fillna(50)
    macd = ta.macd(df['close'], fast=12, slow=26, signal=9)
    macd_series = macd['MACD_12_26_9'].fillna(0)
    volatility_series = ta.stdev(df['close'], length=20).fillna(0)

    # ƒêI·ªÄU CH·ªàNH: Ghi ƒë√® gi√° tr·ªã cu·ªëi c√πng c·ªßa chu·ªói gi·∫£ l·∫≠p b·∫±ng gi√° tr·ªã nh·∫≠p th·ªß c√¥ng
    # ƒêi·ªÅu n√†y gi√∫p c√°c features price_diff_st v√† price_diff_ema trong ML kh·ªõp v·ªõi gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p
    supertrend_series.iloc[-1] = supertrend_val
    ema200_series.iloc[-1] = ema200_val
    rsi_series.iloc[-1] = rsi_val
    macd_series.iloc[-1] = macd_val
    volatility_final = volatility_series.iloc[-1]

    # Chu·∫©n b·ªã D·ªØ li·ªáu cho ML
    features_df = pd.DataFrame({
        'price_diff_st': df['close'] - supertrend_series,
        'price_diff_ema': df['close'] - ema200_series,
        'rsi': rsi_series,
        'macd': macd_series,
        'volume_change': df['volume'].pct_change().fillna(0),
        'volatility': volatility_series
    })
    
    labels = (df['close'].pct_change().shift(-1) > 0).astype(int).iloc[:-1]
    features_df = features_df.iloc[:len(labels)]

    # Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh ML
    X_train, X_test, y_train, y_test = train_test_split(features_df, labels, test_size=0.2, random_state=42)
    
    param_grid = {'n_estimators': [50, 100], 'max_depth': [5, 10]}
    model = GridSearchCV(RandomForestClassifier(random_state=42, class_weight='balanced'), param_grid, cv=2)
    model.fit(X_train, y_train)
    
    acc = accuracy_score(y_test, model.predict(X_test))
    
    # Tr·∫£ v·ªÅ m√¥ h√¨nh, ƒë·ªô ch√≠nh x√°c, volatility v√† gi√° tr·ªã ch·ªâ b√°o ng∆∞·ªùi d√πng nh·∫≠p
    return model, acc, volatility_final, supertrend_val, ema200_val, rsi_val, macd_val

# H√†m quy·∫øt ƒë·ªãnh giao d·ªãch v·ªõi t·ªëi ∆∞u h√≥a ML
def decide_trade(entry, supertrend, ema200, rsi, macd_val, model_results):
    try:
        model, acc, volatility_final, _, _, _, _ = model_results
        
        if entry is None:
            return "Gi√° Entry (Price) kh√¥ng ƒë∆∞·ª£c nh·∫≠p. Kh√¥ng th·ªÉ ra l·ªánh."

        # Chu·∫©n b·ªã feature hi·ªán t·∫°i
        current_features = pd.DataFrame({
            'price_diff_st': [entry - supertrend],
            'price_diff_ema': [entry - ema200],
            'rsi': [rsi],
            'macd': [macd_val],
            'volume_change': [0],
            'volatility': [volatility_final]
        })
        
        # ƒê·∫£m b·∫£o c√°c ch·ªâ s·ªë ƒë·∫ßu v√†o h·ª£p l·ªá
        if not current_features.isna().all(axis=1).iloc[0]:
            pred = model.predict(current_features)[0]
            prob_win = model.predict_proba(current_features)[0][pred]
        else:
            return "D·ªØ li·ªáu ch·ªâ b√°o nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng."
        
        # 6. Ra quy·∫øt ƒë·ªãnh Giao d·ªãch T·ªëi ∆∞u (C·∫£i thi·ªán logic v√† qu·∫£n l√Ω r·ªßi ro)
        
        # T√≠n hi·ªáu Mua (LONG)
        if pred == 1 and entry > supertrend and entry > ema200 and rsi > 50 and macd_val > 0:
            edge = prob_win - (1 - prob_win) + 0.1 * (volatility_final / entry)
            risk_pct = max(1, min(5, edge / (1 - prob_win) * 2)) if (1 - prob_win) > 0 else 3
            
            target = entry * (1 + 0.1 * prob_win + 0.05 * edge)
            stop = entry * (1 - 0.02 / (prob_win + 0.1))
            
            return f"LONG t·∫°i {entry:.2f} VNDC. Ch·ªët l·ªùi t·∫°i {target:.2f} VNDC. Stop-loss t·∫°i {stop:.2f} VNDC. R·ªßi ro {risk_pct:.2f}% v·ªën. T·ªâ l·ªá th·∫Øng ∆∞·ªõc t√≠nh: {prob_win*100:.2f}% (Accuracy backtest: {acc*100:.2f}%)."
            
        # T√≠n hi·ªáu B√°n (SHORT)
        elif pred == 0 and entry < supertrend and entry < ema200 and rsi < 50 and macd_val < 0:
            edge = (1 - prob_win) - prob_win + 0.1 * (volatility_final / entry)
            risk_pct = max(1, min(5, edge / prob_win * 2)) if prob_win > 0 else 3
            
            target = entry * (1 - 0.1 * (1 - prob_win) - 0.05 * edge)
            stop = entry * (1 + 0.02 / (1 - prob_win + 0.1))
            
            return f"SHORT t·∫°i {entry:.2f} VNDC. Ch·ªët l·ªùi t·∫°i {target:.2f} VNDC. Stop-loss t·∫°i {stop:.2f} VNDC. R·ªßi ro {risk_pct:.2f}% v·ªën. T·ªâ l·ªá th·∫Øng ∆∞·ªõc t√≠nh: {(1-prob_win)*100:.2f}% (Accuracy backtest: {acc*100:.2f}%)."
        
        # T√≠n hi·ªáu Ch·ªù ƒê·ª£i
        else:
            return f"CH·ªú ƒê·ª¢I. Kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh; th·ªã tr∆∞·ªùng sideway. T·ªâ l·ªá th·∫Øng th·∫•p (D·ª± ƒëo√°n ML: {prob_win*100:.2f}%). Accuracy backtest: {acc*100:.2f}%."
            
    except Exception as e:
        logger.error(f"Error in decide_trade: {e}")
        return "L·ªói ph√¢n t√≠ch quy·∫øt ƒë·ªãnh. Th·ª≠ l·∫°i."
        
# 7. Giao di·ªán Streamlit
st.set_page_config(page_title="AI Trading Analyzer Pro", layout="wide")
st.markdown("""
    <style>
    .stButton>button {
        width: 100%;
        font-size: 1.2em;
        font-weight: bold;
    }
    .stSuccess, .stError, .stWarning {
        padding: 20px;
        border-radius: 10px;
        font-size: 1.1em;
    }
    .main-title {
        color: #007bff;
        text-align: center;
        margin-bottom: 20px;
    }
    </style>
    <h1 class="main-title">ü§ñ AI Trading Analyzer Pro (Nh·∫≠p Tay & ML)</h1>
    <p style='text-align: center; color: gray;'>Ph√¢n t√≠ch d·ªØ li·ªáu ch·ªâ b√°o th·ªß c√¥ng ƒë·ªÉ ƒë∆∞a ra t√≠n hi·ªáu giao d·ªãch t·ªëi ∆∞u, b·ªè qua l·ªói OCR.</p>
""", unsafe_allow_html=True)

st.sidebar.title("C√†i ƒê·∫∑t")
st.sidebar.info("Vui l√≤ng nh·∫≠p c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t hi·ªán t·∫°i c·ªßa c·∫∑p ti·ªÅn (v√≠ d·ª•: USELESS/VNDC) ƒë·ªÉ AI ph√¢n t√≠ch.")

st.subheader("üìù Nh·∫≠p D·ªØ Li·ªáu Ch·ªâ B√°o Hi·ªán T·∫°i")

# V√πng nh·∫≠p li·ªáu th·ªß c√¥ng
col_input1, col_input2 = st.columns(2)

with col_input1:
    # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh theo ·∫£nh ch·ª•p m√†n h√¨nh cu·ªëi c√πng (9,087,938)
    entry_price = st.number_input("Gi√° Entry Hi·ªán T·∫°i (Price)", min_value=0.0, format="%.4f", value=9087938.00)
    supertrend_val = st.number_input("Gi√° tr·ªã SuperTrend (V√≠ d·ª•: 9150000.00)", min_value=0.0, format="%.4f", value=9150000.00)
    rsi_val = st.number_input("Gi√° tr·ªã RSI (0 - 100)", min_value=0.0, max_value=100.0, format="%.2f", value=45.0)

with col_input2:
    ema200_val = st.number_input("Gi√° tr·ªã EMA200 (V√≠ d·ª•: 8900000.00)", min_value=0.0, format="%.4f", value=8900000.00)
    macd_val = st.number_input("Gi√° tr·ªã MACD (Histogram/MACD Line)", format="%.4f", value=-1000.0)
    
if st.button("üöÄ PH√ÇN T√çCH N√ÇNG CAO & RA L·ªÜNH", type="primary"):
    
    if entry_price <= 0 or supertrend_val <= 0 or ema200_val <= 0:
        st.error("Gi√° Entry, SuperTrend v√† EMA200 ph·∫£i l·ªõn h∆°n 0.")
    else:
        progress_bar = st.progress(0, text="ƒêang x·ª≠ l√Ω...")
        
        # --- PHASE 1: ML Training and Analysis ---
        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh ML v√† t√≠nh to√°n ƒë·ªô bi·∫øn ƒë·ªông..."):
            time.sleep(0.5)
            progress_bar.progress(50, text="ƒêang hu·∫•n luy·ªán m√¥ h√¨nh ML...")
            
            # Hu·∫•n luy·ªán m√¥ h√¨nh (ch·ªâ ch·∫°y 1 l·∫ßn)
            # Truy·ªÅn t·∫•t c·∫£ c√°c gi√° tr·ªã nh·∫≠p v√†o ƒë·ªÉ m√¥ h√¨nh t·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p kh·ªõp
            model_results = train_model(entry_price, supertrend_val, ema200_val, rsi_val, macd_val)
            
            # Ra quy·∫øt ƒë·ªãnh
            decision = decide_trade(entry_price, supertrend_val, ema200_val, rsi_val, macd_val, model_results)
            progress_bar.progress(100)
        
        st.markdown("---")
        st.subheader("üéØ T√çN HI·ªÜU GIAO D·ªäCH T·ª™ AI")
        
        # Hi·ªÉn th·ªã c√°c ch·ªâ b√°o ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n/s·ª≠ d·ª•ng
        model, acc, volatility_final, supertrend_final, ema2200_final, rsi_final, macd_final = model_results
        
        st.markdown(f"""
        <div style='background-color: #f0f0f0; padding: 10px; border-radius: 5px; margin-bottom: 15px;'>
            **D·ªØ li·ªáu Ph√¢n T√≠ch (Nh·∫≠p v√†o):**<br>
            Gi√° Entry: **{entry_price:.2f}** VNDC<br>
            SuperTrend: **{supertrend_val:.2f}**<br>
            EMA200: **{ema200_val:.2f}**<br>
            RSI: **{rsi_val:.2f}**<br>
            MACD: **{macd_val:.4f}**<br>
            ƒê·ªô bi·∫øn ƒë·ªông (T√≠nh to√°n): **{volatility_final:.2f}**
        </div>
        """, unsafe_allow_html=True)
        
        if "LONG" in decision:
            st.success(f"‚úÖ T√çN HI·ªÜU MUA (LONG)")
            st.markdown(f"**{decision}**")
        elif "SHORT" in decision:
            st.error(f"üî¥ T√çN HI·ªÜU B√ÅN (SHORT)")
            st.markdown(f"**{decision}**")
        else:
            st.warning(f"üü° T√çN HI·ªÜU CH·ªú ƒê·ª¢I")
            st.markdown(f"**{decision}**")
        
        st.info("‚ö†Ô∏è L∆∞u √Ω: T√≠n hi·ªáu n√†y d·ª±a tr√™n d·ªØ li·ªáu nh·∫≠p th·ªß c√¥ng v√† m√¥ h√¨nh ML d·ª±a tr√™n d·ªØ li·ªáu gi·∫£ l·∫≠p l·ªãch s·ª≠. ƒê√¢y kh√¥ng ph·∫£i l·ªùi khuy√™n t√†i ch√≠nh.")
